rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() { return request.auth != null; }
    function isOwner(userId) { return isAuthenticated() && request.auth.uid == userId; }
    function isEmail(email) { return email is string && email.matches('^[\\w\\.-]+@[\\w\\.-]+\\.[\\w]+$') && email.size() <= 254; }
    function isStringBetween(s, min, max) { return s is string && s.size() >= min && s.size() <= max; }
    function isValidCoordinates(lat, lng) { return lat is number && lng is number && lat >= -90 && lat <= 90 && lng >= -180 && lng <= 180; }

    // Users
    match /users/{userId} {
      // Allow users to read their own profile and allow authenticated users to read basic info of others
      allow read: if isOwner(userId)
                  || (isAuthenticated() && resource.data.keys().hasAny(['displayName','photoURL','isOnline','lastActive']));

      allow create: if isOwner(userId)
                    && request.resource.data.keys().hasAll(['email','displayName','createdAt'])
                    && isEmail(request.resource.data.email)
                    && request.resource.data.email == request.auth.token.email
                    && isStringBetween(request.resource.data.displayName, 1, 100)
                    && request.resource.data.createdAt is timestamp;

      allow update: if isOwner(userId)
                    && request.resource.data.email == resource.data.email
                    && request.resource.data.createdAt == resource.data.createdAt;
    }

    // Contacts
    match /contacts/{contactId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || resource.data.contactUserId == request.auth.uid);
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.keys().hasAll(['contactUserId','createdAt','status'])
                    && (request.resource.data.status in ['active','blocked'])
                    && request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Friend requests
    match /friendRequests/{requestId} {
      allow create: if isAuthenticated()
                    && request.resource.data.fromUserId == request.auth.uid
                    && request.resource.data.keys().hasAll(['toUserId','status','createdAt'])
                    && request.resource.data.status == 'pending'
                    && isEmail(request.resource.data.get('fromUserEmail',''))
                    && isEmail(request.resource.data.get('toUserEmail',''))
                    && request.resource.data.createdAt is timestamp;
      allow read: if isAuthenticated() && (resource.data.fromUserId == request.auth.uid || resource.data.toUserId == request.auth.uid);
      allow update: if isAuthenticated()
                    && resource.data.toUserId == request.auth.uid
                    && (request.resource.data.status in ['accepted','declined','blocked']);
    }

    // Alerts
    match /alerts/{alertId} {
      allow create: if isAuthenticated()
                    && request.resource.data.fromUserId == request.auth.uid
                    && request.resource.data.keys().hasAny(['type','message'])
                    && isStringBetween(request.resource.data.message, 1, 500)
                    && (!request.resource.data.keys().hasAny(['location'])
                        || (isValidCoordinates(request.resource.data.location.lat, request.resource.data.location.lng)
                            && (!request.resource.data.location.keys().hasAny(['address']) || isStringBetween(request.resource.data.location.address,0,200))));
      allow read: if isAuthenticated() && (
                    resource.data.fromUserId == request.auth.uid
                    || (resource.data.keys().hasAny(['toUserIds']) && request.auth.uid in resource.data.toUserIds)
                    || (resource.data.keys().hasAny(['contactIds']) && request.auth.uid in resource.data.contactIds)
                  );
      allow update, delete: if isAuthenticated() && resource.data.fromUserId == request.auth.uid;
    }

    // Alert responses
    match /alerts/{alertId}/responses/{responseId} {
      allow create: if isAuthenticated()
                    && request.resource.data.fromUserId == request.auth.uid
                    && request.resource.data.keys().hasAll(['message','timestamp'])
                    && isStringBetween(request.resource.data.message, 1, 300)
                    && request.resource.data.timestamp is timestamp;
      allow read: if isAuthenticated() && (resource.data.fromUserId == request.auth.uid
                                           || get(/databases/$(database)/documents/alerts/$(alertId)).data.fromUserId == request.auth.uid);
      allow update, delete: if isAuthenticated() && resource.data.fromUserId == request.auth.uid;
    }

    // Presence
    match /presence/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId)
                   && request.resource.data.keys().hasAll(['isOnline','lastSeen'])
                   && request.resource.data.isOnline is bool
                   && request.resource.data.lastSeen is timestamp;
    }

    // Chats
    match /chats/{chatId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated()
                    && request.auth.uid in request.resource.data.participants
                    && request.resource.data.keys().hasAll(['participants','createdAt','type'])
                    && (request.resource.data.type in ['direct','group','emergency'])
                    && request.resource.data.participants is list
                    && request.resource.data.participants.size() <= 50
                    && request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }
    match /chats/{chatId}/messages/{messageId} {
      allow create: if isAuthenticated()
                    && request.resource.data.fromUserId == request.auth.uid
                    && request.resource.data.keys().hasAll(['message','timestamp'])
                    && isStringBetween(request.resource.data.message, 1, 1000)
                    && request.resource.data.timestamp is timestamp
                    && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      allow update, delete: if isAuthenticated() && resource.data.fromUserId == request.auth.uid;
    }

    // Locations
    match /locations/{userId} {
      allow read: if isAuthenticated() && userId == request.auth.uid;
      allow write: if isOwner(userId)
                   && request.resource.data.keys().hasAll(['lat','lng','timestamp'])
                   && isValidCoordinates(request.resource.data.lat, request.resource.data.lng)
                   && request.resource.data.timestamp is timestamp
                   && (!request.resource.data.keys().hasAny(['address']) || isStringBetween(request.resource.data.address, 0, 200));
    }

    // Safe zones
    match /safeZones/{zoneId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.keys().hasAll(['name','center','radiusMeters','type','createdAt'])
                    && isStringBetween(request.resource.data.name, 1, 100)
                    && (request.resource.data.type in ['home','work','school','hospital','custom'])
                    && isValidCoordinates(request.resource.data.center.lat, request.resource.data.center.lng)
                    && request.resource.data.radiusMeters is number
                    && request.resource.data.radiusMeters >= 10 && request.resource.data.radiusMeters <= 5000
                    && request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated()
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.keys().hasAll(['type','title','message','createdAt'])
                    && isStringBetween(request.resource.data.title, 1, 100)
                    && isStringBetween(request.resource.data.message, 1, 500)
                    && (request.resource.data.type in ['alert_sent','alert_received','friend_request_sent','friend_request_received','contact_added','system'])
                    && request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Rate limits (non-sensitive): allow authenticated users (aligns with current client implementation)
    match /rateLimits/{docId} {
      allow read, write: if isAuthenticated();
    }

    // Audit log (write allowed for users, read restricted to admins)
    match /auditLog/{logId} {
      allow create: if isAuthenticated();
      allow read: if request.auth.token.admin == true;
    }

    // System settings
    match /settings/{document=**} {
      allow read: if isAuthenticated();
      allow write: if request.auth.token.admin == true;
    }
  }
}